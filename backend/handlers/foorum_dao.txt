package handlers

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"
)

type Post struct {
	PostId           int
	UserId           int
	UserEmail        string
	CreatedAt        time.Time
	Title            string
	Text             string
	NumberOfLikes    int
	NumberOfDislikes int
	// lisatud 20.04
	Commentid []Comment
}



// kirjutab veebilehelt andmed andmebaasi
func (dao *FoorumDao) insert_post(user_id int, title string, text string) {
	//dao.db.Query("INSERT INTO (title, text) VALUES (?, ?)")
	_, err := dao.db.Exec("CREATE TABLE IF NOT EXISTS posts (id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, user_id INTEGER NOT NULL, title VARCHAR NOT NULL, text VARCHAR NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)")
	if err != nil {
		panic(err)
	}

	stmt, err := dao.db.Prepare("INSERT INTO posts(user_id, title, text) VALUES (?, ?, ?)")
	if err != nil {
		log.Fatal("500 Internal server error", http.StatusInternalServerError)
		panic(err)
	}
	_, err = stmt.Exec(user_id, title, text)
	if err != nil {
		log.Fatal(err)
		panic(err)
	}
}

type PostFilter struct {
	CreatorUserId int
	Category      []string
	LikedByUserId int //3mai kui see on siin structis siis ei filtreeri MyPosts
}

// loeb-tagastab andmebaasist kirjed valja
func (dao *FoorumDao) list_posts(filter PostFilter) []Post {

	fmt.Println("foorum_dao filtter", filter)

	filter_by_post_id := false
	filter_post_ids := make(map[int]int)
	if filter.LikedByUserId > 0 {
		filter_by_post_id = true
		filter_post_ids = dao.posts_liked_by_user(filter.LikedByUserId)

	}
	rows, err := dao.db.Query(`
		SELECT posts.id, user_id, title, text, posts.created_at,
		       COALESCE(user.email, '') AS user_email,
				(SELECT COUNT (1) FROM likes WHERE likes.post_id = posts.id AND likes.comment_id = 0 AND likes.likes = 'L') AS num_likes,
				(SELECT COUNT (1) FROM likes WHERE likes.post_id = posts.id AND likes.comment_id = 0 AND likes.likes = 'D') AS num_dislikes
				
		  FROM posts
		       LEFT JOIN user ON posts.user_id = user.id
			 WHERE ( ? = 0 OR posts.user_id = ? )
		
		ORDER BY posts.created_at DESC, posts.id DESC
		`, filter.CreatorUserId, filter.CreatorUserId)

	
	if err != nil {
		panic(err)
	}
	defer rows.Close()
	var posts []Post
	for rows.Next() {
		//fmt.Println(rows)
		post := Post{}
		err := rows.Scan(
			&(post.PostId),
			&(post.UserId),
			&(post.Title),
			&(post.Text),
			&(post.CreatedAt),
			&(post.UserEmail),
			&(post.NumberOfLikes),
			&(post.NumberOfDislikes),
		)
		if err != nil {
			panic(err)
		}

		if filter_by_post_id && filter_post_ids[post.PostId] != 1 {

			continue
		}

		titleMatces := true

		for _, category := range filter.Category {

			if !strings.Contains(post.Title, category) {
				titleMatces = false
			}

		}

		if !titleMatces {
			continue
		}

		post.Commentid = dao.list_comments(post.PostId)

		posts = append(posts, post)
	}

	return posts
}

//-----------------------------------------------------------------------------------

type UserRecord struct {
	Id        int
	FirstName string
	LastName  string
	EMail     string
}

// kontrollib, kas kasutaja on sisse logitud
func (dao *FoorumDao) find_user_record_for_session(sessionId string) *UserRecord {

	fmt.Println("foorumdao finduser")
	rows, err := dao.db.Query(
		"SELECT id, firstname, lastname, email FROM user WHERE sessionID = ?", sessionId)
	//	"SELECT id, firstname, lastname, email FROM user WHERE ID = 4") see oli selleks et testimise ajal oleks sillamae1234 kogu aeg sisse logitud
	if err != nil {
		panic(err)
	}
	defer rows.Close()
	for rows.Next() {
		user := UserRecord{}
		err := rows.Scan(&(user.Id), &(user.FirstName), &(user.LastName), &(user.EMail))
		if err != nil {
			panic(err)
		}
		return &user
	}
	return nil
}

func (dao *FoorumDao) posts_liked_by_user(UserId int) map[int]int {

	rows, err := dao.db.Query(
		"SELECT post_id FROM likes WHERE likes = 'L' AND user_id = ?", UserId)

	if err != nil {
		panic(err)
	}
	defer rows.Close()
	res := make(map[int]int)

	for rows.Next() {
		var post_id int
		err := rows.Scan(&(post_id))
		if err != nil {
			panic(err)
		}
		res[post_id] = 1

	}

	return res
}
